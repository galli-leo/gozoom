// Code generated by "enumer -type=NALUType -trimprefix=NALU_"; DO NOT EDIT.

//
package parser

import (
	"fmt"
)

const (
	_NALUTypeName_0 = "NONIDR"
	_NALUTypeName_1 = "IDRSEISPSPPSAUD"
)

var (
	_NALUTypeIndex_0 = [...]uint8{0, 6}
	_NALUTypeIndex_1 = [...]uint8{0, 3, 6, 9, 12, 15}
)

func (i NALUType) String() string {
	switch {
	case i == 1:
		return _NALUTypeName_0
	case 5 <= i && i <= 9:
		i -= 5
		return _NALUTypeName_1[_NALUTypeIndex_1[i]:_NALUTypeIndex_1[i+1]]
	default:
		return fmt.Sprintf("NALUType(%d)", i)
	}
}

var _NALUTypeValues = []NALUType{1, 5, 6, 7, 8, 9}

var _NALUTypeNameToValueMap = map[string]NALUType{
	_NALUTypeName_0[0:6]:   1,
	_NALUTypeName_1[0:3]:   5,
	_NALUTypeName_1[3:6]:   6,
	_NALUTypeName_1[6:9]:   7,
	_NALUTypeName_1[9:12]:  8,
	_NALUTypeName_1[12:15]: 9,
}

// NALUTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func NALUTypeString(s string) (NALUType, error) {
	if val, ok := _NALUTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to NALUType values", s)
}

// NALUTypeValues returns all values of the enum
func NALUTypeValues() []NALUType {
	return _NALUTypeValues
}

// IsANALUType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i NALUType) IsANALUType() bool {
	for _, v := range _NALUTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
